openapi: 3.0.3
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: http://localhost:3000
info:
  description: Football League Management API
  version: 1.0.0
  title: Football management league
  contact:
    email: berdugoe@post.bgu.ac.il
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: main
    description: Landing page
  - name: auth
    description: Login, Register and Logout actions
  - name: team
    description: Team data
  - name: player
    description: Player data
  - name: stage
    description: Stage Data
  - name: favorite
    description: Favorites Players, Teams, Games
  - name: FAR
    description: FootBall Association Representor actions
  - name: Search
    description: Search page, including filtered player and team search. remember your last search. 
paths:
  /league/:
    get:
      security:
        - cookieAuth: []
      tags:
        - "main"
      summary: "main league page"
      operationId: "getMainLeaguePage"
      responses:
        '201':
          description: "logged user main page"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leagueMainPageUser'
        '206':
          description: "guest main page - partial returned"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/leagueMainPage'
  /auth/login:  
    post:
      tags:
        - "auth"
      summary: "User login into system"
      operationId: "loginUser"
      requestBody:
        description: "this is the description"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
      responses:
        '200':
          description: "User login succeed"
          headers: 
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=8dsf8esaf65c1xdf3ax2asdcz3asd
        '401':
          description: "Username or Password incorrect"
  /auth/logout:
    post:
      security:
        - cookieAuth: []
      tags:
      - "auth"
      summary: "logout user"
      description: "logging out a user and deletes his cookie."
      operationId: "LogOut"
      responses:
        '201':
          description: "User logout succeed"
        '401':
          description: "You must be logged in to do: logout"
  /auth/register:
    post:
      tags:
      - "auth"
      summary: "Create user"
      description: "Added a user into the database"
      operationId: "createUser"
      requestBody:
        description: JSON object for register. **Username** must be between 3-8 chars and has valid english chars only **Password** for login in clear text,5-10 chars, at least one number and one special character
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegUser'
      responses:
        '201':
          description: "User {userName} created Successfully"
        '401':
          description: "cannot create user"
        '409':
          description: "Username taken"
  /team/{teamID}:
    get:
      tags:
      - "team"
      summary: "get Team Page"
      description: "Returns a single team page"
      operationId: "getTeamPageByID"
      parameters:
        - in: "path"
          name: "teamID"
          description: "ID of team to return"
          required: true
          schema:
            type: integer
            format: int64
          example: 939
      responses:
        '200':
          description: "successful operation,team returned"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamPage'
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Team not found"
        "429":
          description: "Out of tokens in SportMonks API"

  /stage/{stageID}:
    get:
      tags:
      - "stage"
      summary: "Find stage page by ID"
      description: "Returns a single stage page"
      operationId: "getStagePageByID"
      parameters:
        - name: "stageID"
          in: "path"
          description: "ID of Stage to return"
          required: true
          schema:
            type: integer
            format: int64
            example: 467
      responses:
        '200':
          description: "successful operation,team returned"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stagePage'
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "stage not found"
        "429":
          description: "Out of tokens in SportMonks API"
  /player/{playerID}:
    get:
      tags:
      - "player"
      summary: "Find player by ID"
      description: "Returns a single player page"
      operationId: "getPlayerPageByID"
      parameters:
        - name: "playerID"
          in: "path"
          description: "ID of player to return"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "successful operation,team returned"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/playerPage'
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Player not found"
        "429":
          description: "Out of tokens in SportMonks API"
  
  /users/favorite/:
    post:
      security:
        - cookieAuth: []
      tags:
      - "favorite"
      summary: "Add Team,Player or Game to the favorite list"
      operationId: "addToFavorite"
      requestBody:
        description: JSON object for register
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteBody'
      responses:
        '200':
          description: "successful operation, element added to favorite"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Element not found"
        "406":
          description: "you can't add occurred games to the favorite"
        "408":
          description: "Element already in your favorite list"
        "410":
          description: "No such type: element must be TEAM/PLAYER/GAME"
          example: "No such type: Team must be TEAM/PLAYER/GAME"
        "429":
          description: "Out of tokens in SportMonks API"
    /users/favorite/:
    delete:
      security:
        - cookieAuth: []
      tags:
      - "favorite"
      summary: "Remove Team,Player or Game to the favorite list"
      operationId: "RemoveFromFavorite"
      requestBody:
        description: JSON object for register
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoriteBody'
      responses:
        '202':
          description: "successful operation, element removed from favorite"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Element not found"
        "408":
          description: "Element wasn't in your favorite list"
        "410":
          description: "No such type: element must be TEAM/PLAYER/GAME"
          example: "No such type: Team must be TEAM/PLAYER/GAME"
        "429":
          description: "Out of tokens in SportMonks API"
  /users/favoritePlayers: 
    get:
      security:
        - cookieAuth: []
      tags:
      - "favorite"
      summary: "Get the favorite Players of user.(Only Players!)"
      responses:
        '200':
          description: "successful operation- players returned"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerPreview'
        "400":
          description: "Invalid ID supplied"
        "429":
          description: "Out of tokens in SportMonks API"
  /users/favoriteTeams: 
    get:
      security:
        - cookieAuth: []
      tags:
      - "favorite"
      summary: "Get the favorite Team of user.(Only Teams!)"
      responses:
        '200':
          description: "successful operation- teams returned"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        "400":
          description: "Invalid ID supplied"
        "429":
          description: "Out of tokens in SportMonks API"
  /users/favoriteGames: 
    get:
      security:
        - cookieAuth: []
      tags:
      - "favorite"
      summary: "Get the favorite Games of user.(Only Games!)"
      responses:
        '200':
          description: "successful operation - games returned"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
        "400":
          description: "Invalid ID supplied"
        "429":
          description: "Out of tokens in SportMonks API"
  # /users/getFavoriteGamesPage:
  #   get:
  #     security:
  #       - cookieAuth: []
  #     tags:
  #     - "favorite"
  #     summary: "Get the favorite Games page for user"
  #     responses:
  #       '200':
  #         description: "successful operation - games returned"
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/favoriteGamesPage"
  #       "400":
  #         description: "Invalid ID supplied"
  #       "429":
  #         description: "Out of tokens in SportMonks API"
  /far/addReferee:
    post:
      security:
        - cookieAuth: []
      tags:
      - "FAR"
      summary: "Add a referee"
      description: "Added a user into the referee DB"
      operationId: "addReferee"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/referee'
      responses:
        '201':
          description: "Referee add succeed"
        '401':
          description: "You Must be a Football Association Representor"
        '402':
          description: "cannot create user"
        '409':
          description: "username is taken"
        "429":
          description: "Out of tokens in SportMonks API"
  /far: 
    get:
      security:
        - cookieAuth: []
      tags:
      - "FAR"
      description: "return the league management page Data"
      responses:
        '200':
          description: "league management page"
          content:
            application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Game'
        '401':
          description: "You Must be a Football Association Representor"
          
  /far/addReport:
    post:
      security:
        - cookieAuth: []
      tags:
        - "FAR"
      description: "Add single report."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Report"
      responses:
        '200':
          description: "Game Report Added successfully"
        '401':
          description: "You Must be a Football Association Representor"
        '402':
          description: "game doesn't exist"
  /far/updateGameResult:
    put:
      security:
        - cookieAuth: []
      tags:
      - "FAR"
      description: "update result to a game that have occurred"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addGameResult"
      responses:
        '200':
          description: "game updated successfully"
        '401':
          description: "You Must be a Football Association Representor"
        '402':
          description: "game doesn't exist"
  /far/addGame:
    post:
      security:
        - cookieAuth: []
      tags:
      - "FAR"
      summary: "Add a game between two 2 teams"
      description: "Add a game into the games DB"
      operationId: "addGame"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddGameBody'
      responses:
        '201':
          description: "Game added successfully"
        '401':
          description: "You Must be a Football Association Representor"
        '402':
          description: "Can't create game,that his date has passed.Choose another date"
  /search/team/{teamName}:
    get:
      tags:
      - "search"
      summary: "Find team by Name"
      description: "Returns a team"
      operationId: "getTeamByName"
      parameters:
        - name: "teamName"
          in: "path"
          description: "name of team to search for"
          required: true
          schema:
            type: string
          example: "Midtjyllan"
      responses:
        '200':
          description: "successful operation player returned"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamPreview'
        "400":
          description: "Invalid name supplied"
        "404":
          description: "Team: {element} not found."
        "429":
          description: "Out of tokens in SportMonks API"
  /search/team/{playerName}:
    get:
      tags:
      - "search"
      summary: "Find player by Name"
      description: "Returns a single player"
      operationId: "getPlayerPageByName"
      parameters:
        - name: "playerName"
          in: "path"
          description: "name of player to search for"
          required: true
          schema:
            type: string
            example: "modric"
        - name: "team"
          in: "query"
          description: "team id for filter"
          required: false
          schema:
            type: int
            format: int32
            example: 3468
        - name: "position"
          in: "query"
          description: "position for filter 1-4"
          required: false
          schema:
            type: int
            format: int32
      responses:
        '200':
          description: "successful operation player returned"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerPreview'
        "400": 
          description: "Invalid name supplied"
        "404":
          description: "Player: {element} not found"
        "429":
          description: "Out of tokens in SportMonks API"
  /search/last:
    get:
      security:
        - cookieAuth: []
      tags:
      - "search"
      summary: "Returns logged user last search."
      operationId: "SearchYourLastSearch"
      responses:
        '200':
          description: "successful operation your last result history returned"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerPreview'
                # $ref: '#/components/schemas/TeamPreview'
        "201": 
          description: "User found logged, but no search history."
        "401": 
        description: "User not logged in, can't search for history."
        "404":
          description: "Player: {element} not found"
        "429":
          description: "Out of tokens in SportMonks API"
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      name: session
      in: cookie
  # securitySchemes:
  #   cookieAuth:
  #     type: api_key
  #     name: session
  #     in: cookie
  schemas:
    leagueMainPageUser:
      type: "object"
      properties:
        league_details:
          $ref: '#/components/schemas/leagueMainPage'
        upcomingGames:
          type: array
          maxLength: 3
          items: 
            $ref: '#/components/schemas/Game' 

    leagueMainPage:
      type: "object"
      properties:
        leagueName:
          type: string
          example: "SuperLiga"
        leagueId:
          type: integer
          format: int32
          example: 271
        currentSeasonName:
          type: string
          example: "2021/2022"
        currentSeasonId:
          type: integer
          format: int32
          example: 17328
        currentStageName:
          type: string
          example: "Champions"
        currentStageId:
          type: integer
          format: int32
          example: 7744854
        nextGame:
          $ref: '#/components/schemas/Game'
    Game:
      type: "object"
      properties:
        gameID:
          type: integer
          format: int32
          example: 001
        leagueID:
          type: integer
          format: int32
          example: 271
        seasonID:
          type: integer
          format: int32
          example: 145
        stageID:
          type: integer
          format: int32
          example: 467
        refereeID:
          type: integer
          format: int32
          example: 001
        stadiumID:
          type: integer
          format: int32
          example: 124
        homeTeamID:
          type: integer
          format: int32
          example: 003
        awayTeamID:
          type: integer
          format: int32
          example: 004
        gameDate:
          type: string
          format: DATETIME
          example: "2021-05-26T00:00:00.00"
        homeScore:
          type: integer
          format: int32
          example: 2
        awayScore:
          type: integer
          format: int32
          example: 1
    userMainPage:
      type: "object"
      required:
        - user
      properties:
        user: 
            $ref: '#/components/schemas/User'
        favoritGames:
          type: array
          items:
            $ref: '#/components/schemas/Game'
    RegUser:
      type: "object"
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: "username must be between 3-8 chars and has valid english chars only"
          example: "EdenBer"
        firstname:
          type: string
          example: "barak"
        lastname:
          type: string
          example: "falach"
        country:
          type: string
          example: "Israel"
        email:
          type: string
          format: email
        img:
          type: string
          example: "www.img.url.EranZehavi"
        password:
          description: "The password for login in clear text,5-10 chars, at least one number and one special character"
          type: string
          minLength: 5
          maxLength: 10
          example: "Eden2410!"
        type:
          type: string
          example: "TeamUser"
    User:
      type: "object"
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: "username must be between 3-8 chars and has valid english chars only"
          example: "EdenBer"
        firstname:
          type: string
          example: "barak"
        lastname:
          type: string
          example: "falach"
        country:
          type: string
          example: "israel"
        email:
          type: string
          format: email
        favorites:
          type: object
          properties:
            players:
              type: array
              items:
                type: integer
                format: int32
              example: ["411","004"]
            teams:
              type: array
              items:
                type: integer
                format: int32
              example: ["123","434"]
            games:
              type: array
              items:
                type: integer
                format: int32
              example: ["731","001"]
    Team:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 101
        name:
          type: string
          example: "Barcelona"
        shortCode:
          type: string
          example: "FCB"
        logo:
          type: string
          example: "www.logo.com"
        coach_id:
          type: integer
          format: int32
          example: 15215
        coach_fullname:
          type: string
          example: "Brian Priske Pedersen"
    PlayerPreview:
      type: object
      properties:
        player_id:
          type: string
          example: "939"
        name:
          type: string
          example: "Neymar da Silva Santos Junior"
        team_name:
          type: string
          example: "PSG"
        image:
          type: string
          format: url 
          example: "www.photo.com"
        position:
          type: integer
          format: int32
          example: 1
    PlayerAdditional:
      type: object
      properties:
        common_name:
          type: string
          example: "Neymar JR"
        nationality:
          type: string
          example: "Israel"
        birthdate:
          type: string
          format: date
          example: 24/10/1994
        birthcountry:
          type: string
          example: "Israel"
        height:
          type: string
          example: "1.72 cm"
        weight:
          type: string
          description: "weight might be null"
          example: "72.5 kg"
    gameReport: 
      type: object
      properties: 
        id: 
          type: integer
          format: int32
          example: 24
        reportsArray:
          type: array
          items: 
            $ref: '#/components/schemas/report'
    referee: 
      type: object
      properties: 
        user_id: 
          type: integer
          format: int32
          example: 24
        qualification:
          type: string
          example: "Primary"
    Report:
      type: object
      properties:
        report_id:
          type: integer
          format: int32
          example: 23
        game_id:
          type: integer
          format: int32
          example: 4
        report_type:
          type: string
          enum: ["YELLOW_CARD", "RED_CARD","SUBSITUTE","FOUL","GOAL","OFFSIDE","INJURY"]
          example: "YELLOW_CARD"
        minute: 
          type: integer
          format: int32
          example: 48
        player1_name:
          type: string
          example: "lukaku"
        player1_id:
          type: number
          format: int32
          example: 20
        player2_name:
          type: string
          example: "cavani"
        player2_id:
          type: number
          format: int32
          example: 21
    FavoriteBody:
      type: "object"
      properties:
        favorite_id:
          type: integer
          format: int32 
          example: 2
        favorite_type:
          type: string
          enum: ["TEAM","PLAYER","GAME"]
          example: "TEAM"
    AddGameBody:
      type: "object"
      properties:
        leagueID:
          type: integer
          format: int32
          example: 271
        seasonID:
          type: integer
          format: int32
          example: 145
        stageID:
          type: integer
          format: int32
          example: 467
        refereeID:
          type: integer
          format: int32
          example: 001
        stadiumID:
          type: integer
          format: int32
          example: 124
        homeTeamID:
          type: integer
          format: int32
          example: 003
        awayTeamID:
          type: integer
          format: int32
          example: 004
        gameDate:
          type: string
          format: DATETIME
          example: "2021-05-26T00:00:00.000"
    LoginBody:
      type: "object"
      properties:
        username:
          type: string
          example: "EdenRef"
        password:
          type: string
          example: "2410!e"
    playerPage:
      type: "object"
      properties:
        preview:
          $ref: '#/components/schemas/PlayerPreview'
        additional:
          $ref: '#/components/schemas/PlayerAdditional'

    teamPage:
      type: "object"
      properties:
        teamPreview:
         $ref: '#/components/schemas/Team'
        players:
          type: array
          items: 
            $ref: '#/components/schemas/PlayerPreview'
        games:
          type: "object"
          properties:
            upcoming_games:
              type: array
              items: 
                $ref: '#/components/schemas/Game'
            previous_games:
              type: array
              items: 
                $ref: '#/components/schemas/Game'
    stagePage:
      type: "object"
      properties:
        stageID:
          type: int
          format: int32
          example: 450
        upcoming_games:
          type: array
          items: 
            $ref: '#/components/schemas/Game'
        previous_games:
          type: array
          items: 
            $ref: '#/components/schemas/Game'
    addGameResult:
      type: "object"
      properties:
        gameID:
          type: int
          format: int32
          example: 3
        homeTeamScore:
          type: int
          format: int32
          example: 2
        awayTeamScore:
          type: int
          format: int32
          example: 3
    # favoriteGamesPage:
    #   type: "object"
    #   properties:
    #     upcoming_games:
    #       type: array
    #       items: 
    #         $ref: '#/components/schemas/Game'
    #     previous_games:
    #       type: array
    #       items: 
    #         $ref: '#/components/schemas/Game'
    TeamPreview:
      type: "object"
      properties:
        id:
          type: integer
          example: 101 
        name:
          type: string
          example: "Barcelona"
        logo:
          type: string
          example: "wwww.logoPath.com"
    OptionalInformativeCurrentStage:
      type: "object"
      properties:
        gameID:
          type: integer
          format: int32
          example: 001
        leagueID:
          type: integer
          format: int32
          example: 271
        seasonID:
          type: integer
          format: int32
          example: 145
        stageID:
          type: integer
          format: int32
          example: 467
        refereeID:
          type: integer
          format: int32
          example: 001
        stadiumID:
          type: integer
          format: int32
          example: 124
        stadiumName:
          type: string
          format: int32
          example: "Sami Offer"
        homeTeamID:
          type: integer
          format: int32
          example: 003
        homeTeamName:
          type: string
          example: "Hapoel Haifa"
        awayTeamID:
          type: integer
          format: int32
          example: 004
        AwayTeamName:
          type: string
          example: "Real Madrid"
        gameDate:
          type: string
          format: DATETIME
          example: "2021-05-26T00:00:00.00"



